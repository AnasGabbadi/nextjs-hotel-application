res.status(200)
 
 const {data} = await client.query({
            query: gql`
            query AllPropertiesQuery {
                properties(where: {offsetPagination: {size:3, offset: ${((filters.page || 1) - 1) * 3}}
                metaQuery: {
                  relation: AND, 
                  metaArray: [
                    ${petFriendlyFilter}
                    ${hasParkingFilter}
                    ${minPriceFilter}
                    ${maxPriceFilter}
                  ]}
              }) {
                  pageInfo {
                    offsetPagination {  
                      total
                    }
                  }
                  nodes {
                    title
                    uri
                    featuredImage {
                      node {
                        uri
                        sourceUrl
                      }
                    }
                    propertyFeatures {
                      bathrooms
                      bedrooms
                      hasParking
                      petFriendly
                      price
                    }
                  }
                }
              }
            `,
        });
 
const { gql } = require("@apollo/client")
const { default: client } = require("client")

 
JSON.parse(req.body)
 
  = async 
 
router.query.slug.join("/")
 
router.query.slug.join("/")
 
, null, {
            shallow: true,
        }
 
router
 
cleanAndTransformBlocks
 
    );
 
import { cleanAndtransformBlocks } from "./cleanAndtransformBlocks";

 
id
 
et
 
            }

 
 acfOptionsMainMenu {
            mainMenu {
                callToActionButton {
                destination {
                    ... on Page {
                    uri
                    }
                }
                label
                }
                menuItems {
                menuItem {
                    destination {
                    ... on Page {
                        uri
                    }
                    }
                    label
                }
                items {
                    destination {
                    ... on Page {
                        uri
                    }
                    }
                    label
                }
                }
            }
 
id
                    title   
                    blocks(postTemplate: false)
                    seo {
                        title
                        metaDesc
                    }
 
seo {
                        title
                        metaDesc
                    }
 
            }

 
acfOptionsMainMenu {
            mainMenu {
                callToActionButton {
                destination {
                    ... on Page {
                    uri
                    }
                }
                label
                }
                menuItems {
                menuItem {
                    destination {
                    ... on Page {
                        uri
                    }
                    }
                    label
                }
                items {
                    destination {
                    ... on Page {
                        uri
                    }
                    }
                    label
                }
                }
            }
 
                    id
                    title   
                    blocks(postTemplate: false)
 
getPage
 
condition
 
    console.log({data});

 
    console.log({data});

 
($uri: String!)
 
        variables: {
            uri,
        },
 
nodeByUri(uri: $uri) {
                ... on Page {
                    id
                    title   
                    blocks(postTemplate: false)
                    seo {
                        title
                        metaDesc
                    }
                }
                ... on Property {
                    id
                    title   
                    blocks(postTemplate: false)
                    seo {
                        title
                        metaDesc
                    }
                }
            }
 
import { cleanAndtransformBlocks } from "./cleanAndtransformBlocks";

 
blocks
 
uri
 
["Poppins", "sans-serif"]
 
,
      },
 
["Aboreto", "cursive"]
 
,"700"
 
import { from } from "@apollo/client";

 
        <div>
            hello
        </div>
 
e
 
}
 
